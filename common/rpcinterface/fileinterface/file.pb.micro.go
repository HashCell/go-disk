// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: file.proto

package fileinterface

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FileService service

type FileService interface {
	GetFileMeta(ctx context.Context, in *GetFileMetaReq, opts ...client.CallOption) (*GetFileMetaResp, error)
	UpdateFileMeta(ctx context.Context, in *UpdateFileMetaReq, opts ...client.CallOption) (*UpdateFileMetaResp, error)
	GetFileList(ctx context.Context, in *GetFileListReq, opts ...client.CallOption) (*GetFileListResp, error)
	DeleteFile(ctx context.Context, in *DeleteFileReq, opts ...client.CallOption) (*DeleteFileResp, error)
}

type fileService struct {
	c    client.Client
	name string
}

func NewFileService(name string, c client.Client) FileService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "fileinterface"
	}
	return &fileService{
		c:    c,
		name: name,
	}
}

func (c *fileService) GetFileMeta(ctx context.Context, in *GetFileMetaReq, opts ...client.CallOption) (*GetFileMetaResp, error) {
	req := c.c.NewRequest(c.name, "FileService.GetFileMeta", in)
	out := new(GetFileMetaResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) UpdateFileMeta(ctx context.Context, in *UpdateFileMetaReq, opts ...client.CallOption) (*UpdateFileMetaResp, error) {
	req := c.c.NewRequest(c.name, "FileService.UpdateFileMeta", in)
	out := new(UpdateFileMetaResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) GetFileList(ctx context.Context, in *GetFileListReq, opts ...client.CallOption) (*GetFileListResp, error) {
	req := c.c.NewRequest(c.name, "FileService.GetFileList", in)
	out := new(GetFileListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) DeleteFile(ctx context.Context, in *DeleteFileReq, opts ...client.CallOption) (*DeleteFileResp, error) {
	req := c.c.NewRequest(c.name, "FileService.DeleteFile", in)
	out := new(DeleteFileResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileService service

type FileServiceHandler interface {
	GetFileMeta(context.Context, *GetFileMetaReq, *GetFileMetaResp) error
	UpdateFileMeta(context.Context, *UpdateFileMetaReq, *UpdateFileMetaResp) error
	GetFileList(context.Context, *GetFileListReq, *GetFileListResp) error
	DeleteFile(context.Context, *DeleteFileReq, *DeleteFileResp) error
}

func RegisterFileServiceHandler(s server.Server, hdlr FileServiceHandler, opts ...server.HandlerOption) error {
	type fileService interface {
		GetFileMeta(ctx context.Context, in *GetFileMetaReq, out *GetFileMetaResp) error
		UpdateFileMeta(ctx context.Context, in *UpdateFileMetaReq, out *UpdateFileMetaResp) error
		GetFileList(ctx context.Context, in *GetFileListReq, out *GetFileListResp) error
		DeleteFile(ctx context.Context, in *DeleteFileReq, out *DeleteFileResp) error
	}
	type FileService struct {
		fileService
	}
	h := &fileServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FileService{h}, opts...))
}

type fileServiceHandler struct {
	FileServiceHandler
}

func (h *fileServiceHandler) GetFileMeta(ctx context.Context, in *GetFileMetaReq, out *GetFileMetaResp) error {
	return h.FileServiceHandler.GetFileMeta(ctx, in, out)
}

func (h *fileServiceHandler) UpdateFileMeta(ctx context.Context, in *UpdateFileMetaReq, out *UpdateFileMetaResp) error {
	return h.FileServiceHandler.UpdateFileMeta(ctx, in, out)
}

func (h *fileServiceHandler) GetFileList(ctx context.Context, in *GetFileListReq, out *GetFileListResp) error {
	return h.FileServiceHandler.GetFileList(ctx, in, out)
}

func (h *fileServiceHandler) DeleteFile(ctx context.Context, in *DeleteFileReq, out *DeleteFileResp) error {
	return h.FileServiceHandler.DeleteFile(ctx, in, out)
}
