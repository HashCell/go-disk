// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: auth.proto

//protoc.exe --proto_path=common/rpcinterface/authinterface --go_out=common/rpcinterface/authinterface --micro_out=common/rpcinterface/authinterface common/rpcinterface/authinterface/auth.proto

package authinterface

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AuthService service

type AuthService interface {
	Authentication(ctx context.Context, in *AuthenticationReq, opts ...client.CallOption) (*AuthenticationResp, error)
	Authorize(ctx context.Context, in *AuthorizeReq, opts ...client.CallOption) (*AuthorizeResp, error)
	UnAuthorize(ctx context.Context, in *UnAuthorizeReq, opts ...client.CallOption) (*UnAuthorizeResp, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "authinterface"
	}
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) Authentication(ctx context.Context, in *AuthenticationReq, opts ...client.CallOption) (*AuthenticationResp, error) {
	req := c.c.NewRequest(c.name, "AuthService.Authentication", in)
	out := new(AuthenticationResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) Authorize(ctx context.Context, in *AuthorizeReq, opts ...client.CallOption) (*AuthorizeResp, error) {
	req := c.c.NewRequest(c.name, "AuthService.Authorize", in)
	out := new(AuthorizeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) UnAuthorize(ctx context.Context, in *UnAuthorizeReq, opts ...client.CallOption) (*UnAuthorizeResp, error) {
	req := c.c.NewRequest(c.name, "AuthService.UnAuthorize", in)
	out := new(UnAuthorizeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceHandler interface {
	Authentication(context.Context, *AuthenticationReq, *AuthenticationResp) error
	Authorize(context.Context, *AuthorizeReq, *AuthorizeResp) error
	UnAuthorize(context.Context, *UnAuthorizeReq, *UnAuthorizeResp) error
}

func RegisterAuthServiceHandler(s server.Server, hdlr AuthServiceHandler, opts ...server.HandlerOption) error {
	type authService interface {
		Authentication(ctx context.Context, in *AuthenticationReq, out *AuthenticationResp) error
		Authorize(ctx context.Context, in *AuthorizeReq, out *AuthorizeResp) error
		UnAuthorize(ctx context.Context, in *UnAuthorizeReq, out *UnAuthorizeResp) error
	}
	type AuthService struct {
		authService
	}
	h := &authServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthService{h}, opts...))
}

type authServiceHandler struct {
	AuthServiceHandler
}

func (h *authServiceHandler) Authentication(ctx context.Context, in *AuthenticationReq, out *AuthenticationResp) error {
	return h.AuthServiceHandler.Authentication(ctx, in, out)
}

func (h *authServiceHandler) Authorize(ctx context.Context, in *AuthorizeReq, out *AuthorizeResp) error {
	return h.AuthServiceHandler.Authorize(ctx, in, out)
}

func (h *authServiceHandler) UnAuthorize(ctx context.Context, in *UnAuthorizeReq, out *UnAuthorizeResp) error {
	return h.AuthServiceHandler.UnAuthorize(ctx, in, out)
}
